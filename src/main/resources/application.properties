server.port=8080
#########################################################################################################
# 配置db0 和db1两个数据源
spring.shardingsphere.datasource.names = db0,db1,db2

# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true

#db0 配置
spring.shardingsphere.datasource.db0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db0.url= jdbc:mysql://localhost:3306/db0?useUnicode=true&characterEncoding=utf8&useSSL=false&allowMultiQueries=true&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.db0.username=root
spring.shardingsphere.datasource.db0.password=123456

#db1 配置
spring.shardingsphere.datasource.db1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db1.url= jdbc:mysql://localhost:3306/db1?useUnicode=true&characterEncoding=utf8&useSSL=false&allowMultiQueries=true&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.db1.username=root
spring.shardingsphere.datasource.db1.password=123456

#db2 配置
spring.shardingsphere.datasource.db2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.db2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.db2.url= jdbc:mysql://localhost:3306/db2?useUnicode=true&characterEncoding=utf8&useSSL=false&allowMultiQueries=true&serverTimezone=GMT%2B8
spring.shardingsphere.datasource.db2.username=root
spring.shardingsphere.datasource.db2.password=123456
#########################################################################################################

#主从数据源配置
#负载均衡方式，可选值：ROUND_ROBIN(轮询)，RANDOM（随机）
spring.shardingsphere.masterslave.load-balance-algorithm-type=round_robin
#最终的数据源名称
spring.shardingsphere.masterslave.name=dataSource
#主库数据源名称
spring.shardingsphere.masterslave.master-data-source-name=db0
spring.shardingsphere.masterslave.slave-data-source-names=db1,db2
#########################################################################################################

# 默认的分库策略：id取模
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column = id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression = db$->{id % 2}
#########################################################################################################
spring.shardingsphere.sharding.tables.t_bill.actual-data-nodes=db$->{0..1}.t_bill_$->{2021..2021}_$->{1..12}
#数据库分片字段(根据表里边的订单id字段分数据库)
spring.shardingsphere.sharding.tables.t_bill.database-strategy.standard.sharding-column=order_id
#自定义数据库分片策略
spring.shardingsphere.sharding.tables.t_bill.database-strategy.standard.precise-algorithm-class-name=com.shardingjdbc.cn.algorithm.DbShardingAlgorithm
#表分片字段
spring.shardingsphere.sharding.tables.t_bill.table-strategy.standard.sharding-column=create_time
#自定义表分片策略
spring.shardingsphere.sharding.tables.t_bill.table-strategy.standard.precise-algorithm-class-name=com.shardingjdbc.cn.algorithm.TableShardingAlgorithm
#########################################################################################################
# 使用SNOWFLAKE算法生成主键
spring.shardingsphere.sharding.tables.t_bill.key-generator.column = order_id
spring.shardingsphere.sharding.tables.t_bill.key-generator.type = SNOWFLAKE
#########################################################################################################
spring.shardingsphere.props.sql.show = true
# mybatis-plus相关配置
mybatis-plus.type-aliases-package=com.shardingjdbc.cn.entity
mybatis-plus.configuration.map-underscore-to-camel-case=true
#########################################################################################################
