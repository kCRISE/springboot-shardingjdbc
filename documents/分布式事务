## ShardingJdbc 数据分布式事务
###1、本地事务
 在不开启任何分布式事务管理器的前提下，让每个数据节点各自管理自己的事务。 它们之间没有协调以及通信的能力，也并不互相知晓其他数据节点事务的成功与否。 本地事务在性能方面无任何损耗，但在强一致性以及最终一致性方面则力不从心。

###2、两阶段提交
 XA协议最早的分布式事务模型是由 X/Open 国际联盟提出的 X/Open Distributed Transaction Processing (DTP) 模型，简称 XA 协议。
 
 　　基于XA协议实现的分布式事务对业务侵入很小。 它最大的优势就是对使用方透明，用户可以像使用本地事务一样使用基于XA协议的分布式事务。 XA协议能够严格保障事务 ACID 特性。
 
 　　严格保障事务 ACID 特性是一把双刃剑。 事务执行在过程中需要将所需资源全部锁定，它更加适用于执行时间确定的短事务。 对于长事务来说，整个事务进行期间对数据的独占，将导致对热点数据依赖的业务系统并发性能衰退明显。 因此，在高并发的性能至上场景中，基于XA协议的分布式事务并不是最佳选择。
    目前，业界在实现 XA 事务时也存在一些主流工具库，包括 Atomikos、Narayana 和 Bitronix。ShardingSphere 对这三种工具库都进行了集成，并默认使用 Atomikos 来完成两阶段提交。
 ###3、柔性事务
  　如果将实现了 ACID 的事务要素的事务称为刚性事务的话，那么基于 BASE 事务要素的事务则称为柔性事务。 BASE 是基本可用、柔性状态和最终一致性这三个要素的缩写。
  
         1、基本可用（Basically Available）保证分布式事务参与方不一定同时在线。
         2、柔性状态（Soft state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉。
         3、而最终一致性（Eventually consistent）通常是通过消息传递的方式保证系统的最终一致性。
  　　在 ACID 事务中对隔离性的要求很高，在事务执行过程中，必须将所有的资源锁定。 柔性事务的理念则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面。通过放宽对强一致性要求，来换取系统吞吐量的提升。
  
  　　基于 ACID 的强一致性事务和基于 BASE 的最终一致性事务都不是银弹，只有在最适合的场景中才能发挥它们的最大长处。 可通过下表详细对比它们之间的区别，以帮助开发者进行技术选型。
  
 ### 测试用例
 ```$xslt
    接口地址：http://localhost:8080/bill/saveBillList
    请求参数：
    {
        "billList": [
            {
                "userId":111,
                "addressId":22,
                "status":"在",
                "createTime":{{createTime1}}
            },
            {
                "userId":11111111111111111111111111111111111111111,
                "addressId":222,
                "status":"在",
                "createTime":{{createTime2}}
            }
        ]
    }
备注（方便传递时间参数）：
    postman.setGlobalVariable("createTime1",Date.parse(new Date("2021/06/12 00:00:10")));
    postman.setGlobalVariable("createTime2",Date.parse(new Date("2021/06/12 00:00:10")));

```

#### 参考文章
https://www.cnblogs.com/dalianpai/p/14001823.html
